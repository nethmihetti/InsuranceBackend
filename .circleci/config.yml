version: 2
orbs:
  aws-ecr: circleci/aws-ecr@0.0.2
  aws-ecs: circleci/aws-ecs@0.0.3
jobs:
  build:
    docker:
      - image: circleci/openjdk:11.0.1-jdk

    working_directory: ~/RESTserver

    branches:
      only:
        - master
        - develop
        - baseproject #only for testing purpose. ToDo: remove this branch

    steps:
      # git pull
      - checkout
      # setup testing env
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Login to DockerHub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
              # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: build the dependancies
          command: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # package into a jar
      - run:
          name: build the project
          command: gradle build

      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Build image
          command: |
            docker build --no-cache -f infrastructure/Dockerfile -t $FULL_IMAGE_NAME .

      - run:
          name: Save image to an archive
          command: |
            mkdir docker-image
            docker save -o docker-image/image.tar $FULL_IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - docker-image
  deploy:
      docker:
        - image: circleci/python:3.6.1
      environment:
        AWS_DEFAULT_OUTPUT: json
      steps:
        - checkout
        - setup_remote_docker
        - attach_workspace:
            at: workspace
        - aws-cli/install
        - aws-cli/configure:
            aws-access-key-id: ${AWS_ACCESS_KEY_ID}
            aws-region: ${AWS_DEFAULT_REGION}
        - run:
            name: Load image
            command: |
              docker load --input workspace/docker-image/image.tar
        - run:
            name: Setup common environment variables
            command: |
              echo 'export ECS_CLUSTER_NAME="${AWS_RESOURCE_NAME_PREFIX}-cluster"' >> $BASH_ENV
              echo 'export ECS_SERVICE_NAME="${AWS_RESOURCE_NAME_PREFIX}-service"' >> $BASH_ENV
              echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"' >> $BASH_ENV
        - run:
            name: Push image
            command: |
              eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
              docker push $FULL_IMAGE_NAME
        - aws-ecs/update-service:
            family: "${ECS_SERVICE_NAME}"
            cluster-name: "${ECS_CLUSTER_NAME}"
            container-image-name-updates: "container=${ECS_SERVICE_NAME},image-and-tag=${FULL_IMAGE_NAME}"
            container-env-var-updates: "container=${ECS_SERVICE_NAME},name=VERSION_INFO,value=${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM},container=${ECS_SERVICE_NAME},name=BUILD_DATE,value=\"$(date)\""
            verify-revision-is-deployed: true
workflows:
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build